package sweetbook.—Åontrollers;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.web.bind.annotation.*;import sweetbook.entities.Rating;import sweetbook.entities.Recipe;import sweetbook.entities.User;import sweetbook.services.*;import javax.servlet.http.HttpServletRequest;import java.security.Principal;import java.util.List;@RestController@RequestMapping(path = "recipe")public class RecipeController {  private class pageCombine {    List<Recipe> recipes;    int pageNumber;    public pageCombine(List<Recipe> recipes, int pageNumber) {      this.recipes = recipes;      this.pageNumber = pageNumber;    }    public List<Recipe> getRecipes() {      return recipes;    }    public int getPageNumber() {      return pageNumber;    }  }  @Autowired  private RecipeService recipeService;  @Autowired  private UserService userService;  @Autowired  private RatingService ratingService;  @Autowired  private CategoryService categoryService;  @Autowired  private IngredientService ingredientService;  @GetMapping("/all")  public List<Recipe> findAll() {    return recipeService.findAll();  }  @GetMapping("/page/{page}")  public pageCombine findAllPageable(@PathVariable int page) {    Page<Recipe> recipes = recipeService.findAllByOrderByIdDesc(PageRequest.of(page, 10));    return new pageCombine(recipes.getContent(), recipes.getTotalPages());  }  @GetMapping("{recipeId}")  public Recipe findById(@PathVariable int recipeId) {    return recipeService.findById(recipeId);  }// SEARCH "ENGINE"  @GetMapping("/pageglobal/{keyword}/{page}")  public pageCombine findAllByKeywordPageable(@PathVariable String keyword, @PathVariable int page) {    Page<Recipe> recipes = recipeService.findAllByKeyword(keyword.trim(), PageRequest.of(page, 10));    return new pageCombine(recipes.getContent(), recipes.getTotalPages());  }  @GetMapping("/pagebyuser/{nameUsr}/{page}")  public pageCombine findAllByUserPageable(@PathVariable String nameUsr, @PathVariable int page) {    String firstName, lastName;    if (nameUsr.trim().split(" ").length > 1) {      firstName = nameUsr.split(" ")[0];      lastName = nameUsr.split(" ")[1];    } else      firstName = lastName = nameUsr;    Page<Recipe> recipes = recipeService.findAllByUser(firstName, lastName, PageRequest.of(page, 10));    return new pageCombine(recipes.getContent(), recipes.getTotalPages());  }  @GetMapping("/pagebyname/{recipeName}/{page}")  public pageCombine findAllByNamePageable(@PathVariable String recipeName, @PathVariable int page) {    Page<Recipe> recipes = recipeService.findAllByName(recipeName.trim(), PageRequest.of(page, 10));    return new pageCombine(recipes.getContent(), recipes.getTotalPages());  }  @GetMapping("/pagebycat/{nameCat}/{page}")  public pageCombine findAllByCategoryPageable(@PathVariable String nameCat, @PathVariable int page) {    Page<Recipe> recipes = recipeService.findAllByCategory(nameCat.trim(), PageRequest.of(page, 10));    return new pageCombine(recipes.getContent(), recipes.getTotalPages());  }  @GetMapping("/pagebying/{nameIng}/{page}")  public pageCombine findAllByIngredientPageable(@PathVariable String nameIng, @PathVariable int page) {    Page<Recipe> recipes = recipeService.findAllByIngredient(nameIng.trim(), PageRequest.of(page, 10));    return new pageCombine(recipes.getContent(), recipes.getTotalPages());  }  // SAVE AND UPDATE  @PostMapping  @ResponseBody  public void save(@RequestBody Recipe recipe, HttpServletRequest request) throws Exception {    Principal principal = request.getUserPrincipal();    User userPrincipal = userService.findByName(principal.getName());    recipe.setUser(userPrincipal);    recipe.setCategories((categoryService.processUniqueCategory(recipe.getCategories())));    recipe.setCompositions(ingredientService.processUniqueIngredient(recipe.getCompositions()));    if (recipe.getName().isEmpty()) throw new EmptyRecipeNameException();    if (recipe.getDescription().isEmpty()) throw new EmptyRecipeDescriptionException();    if (recipe.getAlgorithm().isEmpty()) throw new EmptyRecipeAlgorithmException();    recipeService.save(recipe);  }  // RATINGS / LIKES /  @GetMapping("getrating/{recipeId}")  public String getRecipeRating(@PathVariable int recipeId) throws Exception {    Recipe recipe = recipeService.findById(recipeId);    if (recipe == null) throw new RecipeIdNotFoundException();    return Integer.toString(recipe.getSumRating());  }  @GetMapping("getuserslike/{recipeId}")  @ResponseBody  public String getUsersLike(@PathVariable int recipeId, HttpServletRequest request) throws Exception {    int likeValue;    Principal principal = request.getUserPrincipal();    User userPrincipal = userService.findByName(principal.getName());    if (userPrincipal == null) throw new NoUserException();    Recipe recipe = recipeService.findById(recipeId);    if (recipe == null) throw new RecipeIdNotFoundException();    Rating userRating = ratingService.findRatingByUserAndRecipe(userPrincipal, recipe);    if (userRating == null) likeValue = 0;    else likeValue = userRating.getValue();    return Integer.toString(likeValue);  }  @GetMapping("like/{recipeId}/{likeValue}")  @ResponseBody  public void likeRecipe(@PathVariable int recipeId, @PathVariable int likeValue, HttpServletRequest request) throws Exception {    int oldLikeValue;    Rating newRating;    Principal principal = request.getUserPrincipal();    User userPrincipal = userService.findByName(principal.getName());    if (userPrincipal == null) throw new NoUserException();    Recipe recipe = recipeService.findById(recipeId);    if (recipe == null) throw new RecipeIdNotFoundException();    if (likeValue > 1 || likeValue < -1) throw new LikeValueIsWrongException();    Rating userRating = ratingService.findRatingByUserAndRecipe(userPrincipal, recipe);    if (userRating == null) {      oldLikeValue = 0;      newRating = new Rating(recipe, userPrincipal, likeValue);    } else {      oldLikeValue = userRating.getValue();      newRating = new Rating(userRating.getId(), recipe, userPrincipal, likeValue);    }    recipe.setSumRating(recipe.getSumRating() - oldLikeValue + likeValue);    recipeService.save(recipe);    ratingService.saveRating(newRating);  }  //EXCEPTIONS  private class EmptyRecipeNameException extends Exception {    public EmptyRecipeNameException() {      super("Empty name of recipe!");    }  }  private class EmptyRecipeAlgorithmException extends Exception {    public EmptyRecipeAlgorithmException() {      super("Empty algorithm of recipe!");    }  }  private class EmptyRecipeDescriptionException extends Exception {    public EmptyRecipeDescriptionException() {      super("Empty description of recipe!");    }  }  private class NoUserException extends Exception {    public NoUserException() {      super("No user found by response data");    }  }  private class RecipeIdNotFoundException extends Exception {    public RecipeIdNotFoundException() {      super("No recipe found by response data");    }  }  private class LikeValueIsWrongException extends Exception {    public LikeValueIsWrongException() {      super("Like value should be >= -1 and <= 1");    }  }}